{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WebRegex","RegExp","PhoneRegex","formValid","formError","valid","Object","values","forEach","val","length","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","name","value","state","phonenumber","test","website","setState","defineProperty","console","log","handleSubmit","obj1","concat","city","about","axios","get","then","res","catch","error","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","cols","rows","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b417c97e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\n\nconst WebRegex = RegExp(/^((https?|ftp|smtp):\\/\\/)?(www.)?[a-z0-9]+\\.[a-z]+(\\/[a-zA-Z0-9#]+\\/?)*$/);\n\nconst PhoneRegex = RegExp(/^\\(?([0-9]{3})\\)?[-.●]?([0-9]{3})[-.●]?([0-9]{4})$/);\n\nconst formValid = formError=> {\n  let valid = true;\n\n  Object.values(formError).forEach(val => {\n    val.length > 0 && (valid = false);\n  });\n\n  return valid;\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      name:null,\n      phonenumber:null,\n      city:null,\n      website:null,\n      about:null,\n      formError:{\n        name:\"\",\n        phonenumber:\"\",\n        website:\"\"\n      }\n    }\n      }\n\n  handleChange = (event) =>{\n      \n    //this.setState({[event.target.name]:event.target.value});\n    const { name, value} = event.target;\n      let formError = this.state.formError;\n\n      switch(name){\n        case 'name':\n          formError.name = value.length <3 ? \"minimim 3 character\" : \"\";\n          break;\n\n          case 'phonenumber': \n          formError.phonenumber = PhoneRegex.test(value) ? \"\" : \"Invalid Format\";\n          break;\n\n          case 'website':\n          formError.website = WebRegex.test(value) ? \"\" : \"Invalid Website address\";\n          break;\n\n        default:\n        break;\n      }\n      this.setState({formError,[name]:value}, () => console.log(this.state))\n    }\n\n     handleSubmit = (event) => {\n      \n      if (formValid(this.state.formError)) {\n        var obj1 = console.log(`\n        name:${this.state.name},\n        city:${this.state.city},\n        phonenumber:${this.state.phonenumber},\n        website:${this.state.website},\n        about:${this.state.about}\n        `);\n\n      axios.get('https://localhost:5000/create', obj1)\n      .then(function(res) {\n        console.log(res.obj1);\n      })\n      .catch(function(error){\n        console.log(error);\n      });\n      }\n      else {\n        console.error('form Invalid');\n      }\n      \n    }\n  render() {\n  const {formError} = this.state;\n    return (\n      <div className=\"container\">\n      <form onSubmit={this.handleSubmit}>\n      <h3>Profile Info</h3>\n      <div>\n       <div className=\"form-group\">\n         <label>Name:</label>\n         <input\n         type=\"text\"\n         className = \"form-control\"\n         placeholder=\"Name\" \n         name=\"name\"\n         //value={this.state.name}\n         onChange={this.handleChange}\n        />\n        {formError.name.length > 0 && (\n          <span>{formError.name}</span>  \n        )}\n       </div> \n       <br></br>\n      <div className=\"form-group\">\n         City :<input \n         type=\"text\" \n         className = \"form-control\"\n         placeholder=\"City\" \n         name=\"city\"\n         //value={city}\n         onChange={this.handleChange}\n        />\n      </div>\n      <br></br>\n      <div className=\"form-group\">\n          PhoneNumber:<input\n          type=\"tel\" \n          className = \"form-control\"\n          placeholder=\"PhoneNumber\" \n          name=\"phonenumber\"\n          //value={phonenumber}\n          onChange={this.handleChange}\n        />\n         {formError.phonenumber.length > 0 && (\n          <span>{formError.phonenumber}</span>  \n        )}\n      </div>\n      <br></br>\n      <div className=\"form-group\">\n      Website:<input\n          type=\"text\"\n          className = \"form-control\"\n          placeholder=\"Website\"\n           name=\"website\"\n           //value={website}\n           onChange={this.handleChange}\n          />\n           {formError.website.length > 0 && (\n          <span>{formError.website}</span>  \n        )}\n      </div>\n      <br></br>\n      </div>\n      <h3>Profile Description</h3>\n      <div className = \"form-group\">\n      About : <textarea cols=\"40\"  className = \"form-control\" rows=\"5\" name=\"about\" onChange={this.handleChange}/>\n      </div>\n      <div className = \"form-group\">\n      <button className=\"form-control\" type=\"submit\">Save Changes</button>\n      </div>\n\n       </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}